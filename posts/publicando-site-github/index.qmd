---
title: "Publicação de Website com Quarto e GitHub Pages"
author: "Evaldo Silva"
date: "2025-04-13"
number-sections: false
format: html
---

![](github-pages.png){width="429"}

Publicar um site com Quarto via GitHub Pages é uma forma simples e gratuita de compartilhar seu conteúdo online. Neste guia, seguimos um fluxo prático: criamos primeiro o repositório no GitHub, depois o projeto no RStudio com o mesmo nome, configuramos a pasta `docs` para publicação, e finalizamos com ajustes nos arquivos `.gitignore` e `LICENSE.md`.

## 🌐 Pré-requisitos

Antes de começar, verifique se você possui os seguintes itens instalados e configurados:

-   ✅ Uma conta ativa no [GitHub](https://github.com)\
-   ✅ O **Git** instalado e configurado no seu sistema\
-   ✅ O **R**, **RStudio** e o pacote **`quarto`** devidamente instalados

------------------------------------------------------------------------

## 🛠️ 1. Criar o repositório no GitHub

1.  Acesse [github.com](https://github.com) e clique em **"New Repository"**.\
2.  Dê ao repositório um dos seguintes nomes:
    -   👉 `meu_website`, `meu_blog` ou outro nome livre
    -   👉 `nome-de-usuario.github.io` *(para uma página pessoal principal — substitua pelo seu nome de usuário real do GitHub)*
3.  Não marque opções como **README**, **.gitignore** ou **LICENSE**. Esses arquivos serão criados depois.

------------------------------------------------------------------------

## 💻 2. Criar seu website ou blog no RStudio

Embora seja possível iniciar o projeto diretamente no RStudio, optamos por criar primeiro o repositório no GitHub. Essa ordem segue boas práticas de versionamento, facilitando a integração entre o repositório remoto e o projeto local desde o início.

1.  Vá até: **File \> New Project \> New Directory \> Quarto Website** (ou **Quarto Blog**)
2.  Dê ao projeto o mesmo nome do repositório criado no GitHub:
    -   `meu_website`, `meu_blog`, ou `nome-de-usuario.github.io`
3.  Escolha o diretório onde o projeto será salvo.
4.  Clique em `Create a git repository.`
5.  Clique em **Create Project**.

O RStudio abrirá automaticamente o novo projeto com os arquivos iniciais (`index.qmd`, `_quarto.yml` etc.) prontos para edição e publicação.

------------------------------------------------------------------------

## 🔧 3. Ajustar o arquivo `_quarto.yml`

Abra o arquivo `_quarto.yml` e edite-o para que fique assim:

``` yaml
project:
  type: website
  output-dir: docs
```

Salve o arquivo (`Ctrl + S`).

Essa configuração define que os arquivos gerados pelo Quarto serão salvos na pasta `docs`, que é a exigência do GitHub Pages para publicar seu site e não a pasta `_sites`.

------------------------------------------------------------------------

## 🧪 4. Renderizar o site localmente

No console do RStudio ou clicando no botão ▶️ **Render do** no `index.qmd`, execute:

``` r
#| eval: false
#| echo: true
quarto::quarto_render()
```

O site será gerado e aberto no navegador. Verifique se a pasta `docs/` foi criada na aba **Files**.

------------------------------------------------------------------------

## 🚀 5. Commit e push para o GitHub

Após renderizar seu site localmente, é hora de enviar os arquivos para o repositório no GitHub. Você pode fazer isso **pelo terminal** (integrado ao RStudio) ou pela **interface Git do próprio RStudio**. Siga as etapas seguintes:

### ✅ 5.1 Copiar o link do repositório no GitHub

1.  Vá até o repositório no GitHub.
2.  Clique no botão verde **Code**.
3.  Copie o link que aparece na aba **HTTPS** (ex: `https://github.com/seu-usuario/seu-repositorio.git`)

### ✅ 5.2 Comandos via terminal

Depois de copiar o link HTTPS do seu repositório no GitHub, volte ao terminal do RStudio e digite o seguinte comando:

``` bash
git remote add origin
```

Em seguida, **cole o link copiado logo após esse comando**, ficando assim:

``` bash
# Exemplo 1 — para página pessoal
git remote add origin https://github.com/nome-de-usuario.github.io.git

# Exemplo 2 — para outro tipo de site ou blog
git remote add origin https://github.com/nome-de-usuario/my_page.git
```

> 📌 Substitua `nome-de-usuario` pelo seu usuário real no GitHub.

Depois, continue com os comandos:

``` bash
git branch -M main
git add .
git commit -m "adicionando site"
git push -u origin main
```

------------------------------------------------------------------------

## ⚙️ 6. Configurar o GitHub Pages

Agora que os arquivos do site estão no repositório, é hora de ativar o GitHub Pages para publicá-lo na web:

1.  No repositório, vá em **Settings \> Pages**
2.  Em **Source**, selecione:
    -   **Branch:** `main`
    -   **Folder:** `/docs`
3.  Clique em **Save**

------------------------------------------------------------------------

## 🎉 7. Pronto!

Após alguns segundos, seu site estará **publicado** e acessível:

-   🔗 `https://nome-de-usuario.github.io/meu_website`
-   🔗 `https://nome-de-usuario.github.io/` *(se for um site pessoal)*

> Exemplo: `https://astuciasnor.github.io/`

------------------------------------------------------------------------

## 📝 8. Editar o `.gitignore` e adicionar o `LICENSE.md`

### ✏️ Editar o `.gitignore`

1.  No GitHub, abra o arquivo `.gitignore` e clique no ícone de lápis ✏️.\
2.  Substitua o conteúdo escolhendo o modelo adequado para **R** e remova a linha `/docs`, se presente.\
3.  Clique em `Commit changes` e escreva uma mensagem de commit e clique em **Commit changes**.

### 📄 Adicionar o arquivo de licença

1.  Clique em **"Add file" \> "Create new file"**
2.  Nomeie como `LICENSE.md`
3.  Clique em `Choose a license template` e escolha a licença deseja (ex: **MIT License**), revise-a e e submeta-a clicando em `Review and submit`.
4.  Clique em **Commit changes.**

### 🔄 Atualize seu repositório local

Volte ao RStudio e clique em **Pull** na aba **Git** para sincronizar as alterações.
